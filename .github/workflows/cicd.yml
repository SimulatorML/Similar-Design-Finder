name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.11.2"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "export PATH=$HOME/.local/bin:\$PATH" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        poetry install

    - name: Format with ruff (black replacement)
      run: |
        poetry run ruff check . --fix

    - name: Sort and clean imports with isort
      run: |
        poetry run isort .

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

    - name: Test with pytest
      run: |
        poetry run pytest

    - name: Run pre-commit checks
      run: |
        poetry run pre-commit run --all-files

    - name: Log in to GitHub Container Registry
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

    - name: Build Docker image
      run: docker build -t ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest .

    - name: Push Docker image to GitHub Container Registry
      run: docker push ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest

    - name: Deploy to server
      env:
        DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
      run: |
        echo "$DEPLOY_SSH_PRIVATE_KEY" > /tmp/private_key
        chmod 600 /tmp/private_key
        ssh -i /tmp/private_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_SERVER << EOF
          docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin <<< ${{ secrets.GITHUB_TOKEN }}
          docker pull ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest
          docker stop my_app || true
          docker rm my_app || true
          docker run -d --name my_app -p 80:80 ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest
        EOF

